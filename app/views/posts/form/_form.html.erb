<%# 新規投稿、投稿の編集の構成 %>
<%= form_with model: post, local: true do |f| %>
  <%# エラーメッセージ表示 %>
  <%= render 'shared/error_messages', object: f.object %>
  
  <div data-controller="form">
    <%# 投稿タイプ,★評価呼び出し %>
    <%= render 'posts/form/post_type', form: f %>

    <%# タイトル呼び出し %>
    <%= render 'posts/form/heading', form: f %>

    <%# 画像アップロード呼び出し %>
    <%= render 'posts/form/image_upload', form: f, post: @post  %>
  
    <%# 書籍サムネイル表示(編集時) %>
    <%= render 'posts/form/image_thumbnail', post: @post %>
  
    <%# youtube_url呼び出し %>
    <%= render 'posts/form/youtube_url', form: f %>
  </div>
    <%# youtubeサムネイル呼び出し(編集時) %>
    <%= render 'posts/form/youtube_thumbnail',  post: @post %>

    <%# カテゴリ呼び出し %>
    <%= render 'posts/form/category_type', form: f %>
  
    <%# 感想呼び出し %>
    <%= render 'posts/form/review_text', form: f %>

  <%# ボタン呼び出し %>
  <%= render 'posts/form/action', form: f,  post: @post %>
<% end %>

<%# 画像、youtubeURLフィールドを非活性にするjavascript %>
<script>
document.addEventListener('turbo:load', function() {
  
  // 書籍と動画のラジオボタンの取得
  const postTypeBook = document.getElementById('post_type_book');
  const postTypeVideo = document.getElementById('post_type_video');
  
  // 更新する対象を取得
  const imageContainer = document.querySelector('[data-field="image"]');
  const youtubeContainer = document.querySelector('[data-field="youtube"]');
  
  // 非活性の状態を設定する関数
  function disableContainer(container, name) {
    //container内の入力フィールドを取得
    const fields = container.querySelectorAll('input');
    
    fields.forEach((field, index) => {
      // フィールドを無効化
      field.disabled = true;
      field.style.backgroundColor = '#f5f5f5';
      field.style.opacity = '0.6';
    });
    container.style.opacity = '0.6';
    container.style.pointerEvents = 'none';
  }

  // 活性の状態を設定する関数
  function enableContainer(container, name) {
    //container内の入力フィールドを取得
    const fields = container.querySelectorAll('input');
    
    fields.forEach((field, index) => {
      // フィールドを有効化
      field.disabled = false;
      field.style.backgroundColor = '';
      field.style.opacity = '';
    });
    container.style.opacity = '1';
    container.style.pointerEvents = '';
  }
  
  // フィールドを更新する関数
  function updateFieldStates() {
    //投稿タイプが書籍の場合
    if (postTypeBook.checked) {
      //画像フィールドを活性にし、
      enableContainer(imageContainer);
      //youtubeURLフィールドを非活性にする
      disableContainer(youtubeContainer);
      //投稿タイプが動画の場合
    } else if (postTypeVideo.checked) {
      //youtubeURLフィールドを活性にし、
      enableContainer(youtubeContainer);
      //画像フィールドを非活性にする
      disableContainer(imageContainer);
    }
  }
  
  // 書籍ボタンを切り替え時にフィールドを更新する関数を呼び出す
  postTypeBook.addEventListener('change', updateFieldStates);
  // 動画ボタンを切り替え時にフィールドを更新する関数を呼び出す
  postTypeVideo.addEventListener('change', updateFieldStates);
  
  // ページ読み込み時の初期状態を設定する
  updateFieldStates();
});
</script>
